setwd("~/Documents/Projetos R")
gapminder
library(gapminder)
https://raw.githubusercontent.com/gadenbuie/yule-rstudio/master/Yule-RStudio.rstheme"
rstudioapi::addTheme(yule_theme, apply = TRUE
devtools::install_github("max-alletsee/rstudio-themes")
devtools::install_github("max-alletsee/rstudio-themes")
install_rstudio_themes("a11y-dark {rsthemes}")
install_rstudio_themes("a11y-dark")
remotes::install_github("gabenbuie/rsthemes")
remotes::install_github("gadenbuie/rsthemes")
remotes::install_github("gadenbuie/rsthemes")
remotes::install_github("gadenbuie/rsthemes", force = TRUE)
theme(gadenbuie)
theme("gadenbuie")
devtools::install_github("max-alletsee/rstudio-themes")
require(devtools::install_github("max-alletsee/rstudio-themes"))
install_github("gdtools")
library(devtools)
require(devtools)
library(devtools)
devtools::install_github("max-alletsee/rstudio-themes")
install_github("gdtools")
install.packages("gdtools")
install.packages("flextable")
require(devtools::install_github("max-alletsee/rstudio-themes"))
remotes::install_github("gadenbuie/rsthemes", force = TRUE)
install_rstudio_theme(theme = a11y-dark)
install_rstudio_theme(theme = "a11y-dark")
source("~/.active-rstudio-document", echo=TRUE)
install_rstudio_theme(theme = "a11y-dark {rsthemes}", force = TRUE)
install_rstudio_theme(theme = "a11y-dark {rsthemes}")
source("~/.active-rstudio-document", echo=TRUE)
list_rsthemes()
devtools::update_packages()
install.packages("gdtools", type = "source")
brew install pkg-config
rsthemes::install_rsthemes()
list_rsthemes()
rsthemes::list_rsthemes()
rsthemes::try_rsthemes(1)
rsthemes::try_rsthemes()
rsthemes::try_rsthemes()
remotes::install_github("rileytwo/darkstudio")
require(devtools)
library(devtools)
install_github("rileytwo/darkstudio")
install_github("rileytwo/darkstudio", force = TRUE)
darkstudio::activate()
devtools::install_github("gadenbuie/rsthemes")
devtools::install_github("gadenbuie/rsthemes", force = TRUE)
rstudioapi::applyTheme("One Dark {rsthemes}")
library("devtools")
install.packages()
install.packages()
install.packages("devtools")
require(devtools)
install_github("braverock/blotter") # dependency
install_github("braverock/quantstrat")
remove.package("rsconnect")
remove.package("rsconnect")
library(rsconnect)
remove.packages("rsconnect", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
install.packages("flexdashboard")
library(flexdashboard)
library(flexdashboard)
ggplot(mtcarts)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
library(ggplot)
library(ggplot2)
set.seed(955)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplotly(p)
library(ggplot2)
library(plotly)
library(ggplot2)
library(plotly)
library(flexdashboard)
install.packages("plyr", "ploty")
set.seed(955)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)
ggplotly(p)
ggplot(p)
p
knit_with_parameters("~/Documents/test.Rmd")
tinytex::install_tinytex()
require(markdown)
require(rmarkdown)
load("~/Documents/Projetos R/HP/.RData")
rm(list = ls())
load("~/Documents/Projetos R/.RData")
install.packges("ggpubr")
install.packages("devtools")
install.packges("ggpubr")
install.packages(c("moderndive", "officer", "Rttf2pt1"))
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
install.packages("devtools")
install.packges("ggpubr")
install.packages("ggpubr")
library(ggpubr)
detach("package:ggpubr", unload = TRUE)
install.packages("credentials")
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, labels = TRUE)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
myd(190212)
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc+ dats(2)
depart <- nyc+ days(2)
depart
depart <- update(hour(17), minute(34) )
depart <- update(hour(17), minute(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
nyc + days(2)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(time = arrive, tzone = "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(time = arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy(June/17/2008, tz = "Singapore")
last_time <- mdy('June/17/2008', tz = "Singapore")
last_time <- mdy('June 17,2008', tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
interval(arrive, last_time)
?interval
how_long <- interval(start = last_time, end = arrive)
as.period(how_long)
stopwatch()
library(dplyr)
require(dplyr)
library(dplyr)
setwd()
getwd()
setwd(./Coursera/Getting and Cleaning Data)
setwd("~/Documents/Projetos R/Coursera/Getting and Cleaning Data")
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
setequal(names(x_test), names(x_train))
x <- rbind(x_train, x_test)
y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
data_combine <- cbind(Subject, y, x)
data <- data_combine %>%
select(subject, code, contains("mean"), contains("std"))
data$code <- activities[data$code, 2]
names(data)[2] = "activity"
names(data)<-gsub("Acc", "Accelerometer", names(data))
names(data)<-gsub("Gyro", "Gyroscope", names(data))
names(data)<-gsub("BodyBody", "Body", names(data))
names(data)<-gsub("Mag", "Magnitude", names(data))
names(data)<-gsub("^t", "Time", names(data))
names(data)<-gsub("^f", "Frequency", names(data))
names(data)<-gsub("tBody", "TimeBody", names(data))
names(data)<-gsub("-mean()", "Mean", names(data), ignore.case = TRUE)
names(data)<-gsub("-std()", "STD", names(data), ignore.case = TRUE)
names(data)<-gsub("-freq()", "Frequency", names(data), ignore.case = TRUE)
names(data)<-gsub("angle", "Angle", names(data))
names(data)<-gsub("gravity", "Gravity", names(data))
tidydata <- data %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(tidydata, "tidydata.txt", row.name=FALSE)
write.table(tidydata, "tidydata.txt", row.name = FALSE)
